name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        python-version: ['3.12']
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        run: |
          python -m pip install --upgrade pip
          pip install uv
      - name: Install dependencies
        run: |
          uv sync
      - name: Install UPX
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update && sudo apt-get install -y upx-ucl
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew install upx
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows RunnerにはデフォルトでUPXが含まれている場合もあるので確認が必要
            echo "UPX installation on Windows might require manual setup or different package manager"
          fi
          upx --version
        shell: bash
      - name: Build binary
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows用のビルド処理
            uv run pyinstaller --distpath=dist/prod --workpath=build/prod --specpath=. --name=llmpack --onefile --clean src/llmpack/cli.py
            mkdir -p dist
            cp dist/prod/llmpack.exe dist/llmpack-windows.exe
          else
            # Linux/macOS用のビルド処理
            uv run make prod
            mkdir -p dist
            if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
              cp dist/prod/llmpack dist/llmpack-linux
            else
              cp dist/prod/llmpack dist/llmpack-macos
            fi
          fi
      - name: Compress binary with UPX
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            upx --best --lzma dist/prod/llmpack.exe
            upx --best --lzma dist/llmpack-windows.exe
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            upx --best --lzma dist/prod/llmpack
            upx --best --lzma dist/llmpack-linux
          else
            upx --best --lzma dist/prod/llmpack
            upx --best --lzma dist/llmpack-macos
          fi
        shell: bash
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: llmpack-${{ matrix.os }}
          path: dist/llmpack-*

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: List artifacts
        run: ls -R artifacts/
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -type f -name "llmpack-*" -exec cp {} release-assets/ \;
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-assets/*
          draft: true
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
